package asm.com.ss.android.ugc.bytex.example.closeable;
import java.util.*;
import org.objectweb.asm.*;
public class CloseableCheckTestDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter cw = new ClassWriter(0);
FieldVisitor fv;
MethodVisitor mv;
AnnotationVisitor av0;

cw.visit(V1_7, ACC_PUBLIC + ACC_SUPER, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", null, "java/lang/Object", new String[] { "java/io/Closeable" });

cw.visitInnerClass("android/os/Build$VERSION", "android/os/Build", "VERSION", ACC_PUBLIC + ACC_STATIC);

{
fv = cw.visitField(ACC_STATIC, "mVersion", "[Ljava/lang/String;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "TAG", "Ljava/lang/String;", null, "CloseableCheckTest");
fv.visitEnd();
}
{
fv = cw.visitField(0, "mInputStream", "Ljava/io/BufferedReader;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(0, "mRe", "Ljava/io/InputStream;", null, null);
fv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getString", "(I)Ljava/lang/String;", null, new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitTypeInsn(NEW, "java/io/FileInputStream");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
mv.visitLdcInsn("");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(I)Ljava/lang/StringBuilder;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileInputStream", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "inputStreamToString", "(Ljava/io/InputStream;)Ljava/lang/String;", false);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/io/InputStream"}, 0, null);
mv.visitInsn(ACONST_NULL);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "inputStreamToString", "(Ljava/io/InputStream;)Ljava/lang/String;", null, new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETSTATIC, "java/nio/charset/StandardCharsets", "UTF_8", "Ljava/nio/charset/Charset;");
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V", false);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "readFully", "(Ljava/io/Reader;)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "readFully", "(Ljava/io/Reader;)Ljava/lang/String;", null, new String[] { "java/io/IOException" });
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, null);
Label l3 = new Label();
mv.visitTryCatchBlock(l2, l3, l2, null);
mv.visitLabel(l0);
mv.visitTypeInsn(NEW, "java/io/StringWriter");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/StringWriter", "<init>", "()V", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitIntInsn(SIPUSH, 1024);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 2);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/io/StringWriter", "[C"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/Reader", "read", "([C)I", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_M1);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/StringWriter", "write", "([CII)V", false);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/StringWriter", "toString", "()Ljava/lang/String;", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/Reader", "close", "()V", false);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 1, new Object[] {"java/io/Reader"}, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/Reader", "close", "()V", false);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ATHROW);
mv.visitMaxs(4, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "getVersion", "()[Ljava/lang/String;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
mv.visitFieldInsn(GETSTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mVersion", "[Ljava/lang/String;");
Label l3 = new Label();
mv.visitJumpInsn(IFNONNULL, l3);
mv.visitInsn(ICONST_4);
mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
mv.visitInsn(DUP);
mv.visitInsn(ICONST_0);
mv.visitLdcInsn("null");
mv.visitInsn(AASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_1);
mv.visitLdcInsn("null");
mv.visitInsn(AASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_2);
mv.visitLdcInsn("null");
mv.visitInsn(AASTORE);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_3);
mv.visitLdcInsn("null");
mv.visitInsn(AASTORE);
mv.visitVarInsn(ASTORE, 0);
mv.visitLdcInsn("/proc/version");
mv.visitVarInsn(ASTORE, 1);
mv.visitLabel(l0);
mv.visitTypeInsn(NEW, "java/io/FileReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileReader", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitTypeInsn(NEW, "java/io/BufferedReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 2);
mv.visitIntInsn(SIPUSH, 8192);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;I)V", false);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "readLine", "()Ljava/lang/String;", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitLdcInsn("\\s+");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ICONST_2);
mv.visitInsn(AALOAD);
mv.visitInsn(AASTORE);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l1);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 2, new Object[] {"[Ljava/lang/String;", "java/lang/String"}, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(GETSTATIC, "android/os/Build$VERSION", "RELEASE", "Ljava/lang/String;");
mv.visitInsn(AASTORE);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_2);
mv.visitFieldInsn(GETSTATIC, "android/os/Build", "MODEL", "Ljava/lang/String;");
mv.visitInsn(AASTORE);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_3);
mv.visitFieldInsn(GETSTATIC, "android/os/Build", "DISPLAY", "Ljava/lang/String;");
mv.visitInsn(AASTORE);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(PUTSTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mVersion", "[Ljava/lang/String;");
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mVersion", "[Ljava/lang/String;");
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "closeQuietly", "(Ljava/io/Closeable;)V", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
mv.visitVarInsn(ALOAD, 0);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEINTERFACE, "java/io/Closeable", "close", "()V", true);
mv.visitLabel(l1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(1, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "readTextFile", "(Ljava/util/List;)Ljava/lang/String;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
Label l3 = new Label();
Label l4 = new Label();
Label l5 = new Label();
mv.visitTryCatchBlock(l3, l4, l5, "java/io/IOException");
Label l6 = new Label();
Label l7 = new Label();
mv.visitTryCatchBlock(l6, l0, l7, "java/io/FileNotFoundException");
Label l8 = new Label();
Label l9 = new Label();
Label l10 = new Label();
mv.visitTryCatchBlock(l8, l9, l10, "java/io/IOException");
Label l11 = new Label();
mv.visitTryCatchBlock(l6, l0, l11, "java/io/IOException");
Label l12 = new Label();
Label l13 = new Label();
Label l14 = new Label();
mv.visitTryCatchBlock(l12, l13, l14, "java/io/IOException");
Label l15 = new Label();
mv.visitTryCatchBlock(l6, l0, l15, null);
mv.visitTryCatchBlock(l7, l8, l15, null);
mv.visitTryCatchBlock(l11, l12, l15, null);
Label l16 = new Label();
Label l17 = new Label();
Label l18 = new Label();
mv.visitTryCatchBlock(l16, l17, l18, "java/io/IOException");
mv.visitTryCatchBlock(l15, l16, l15, null);
mv.visitVarInsn(ALOAD, 0);
Label l19 = new Label();
mv.visitJumpInsn(IFNULL, l19);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "isEmpty", "()Z", true);
Label l20 = new Label();
mv.visitJumpInsn(IFEQ, l20);
mv.visitLabel(l19);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l20);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitLdcInsn("CloseableCheckTest");
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
mv.visitLdcInsn("all file path : ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "toString", "()Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKESTATIC, "android/util/Log", "v", "(Ljava/lang/String;Ljava/lang/String;)I", false);
mv.visitInsn(POP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "iterator", "()Ljava/util/Iterator;", true);
mv.visitVarInsn(ASTORE, 2);
Label l21 = new Label();
mv.visitLabel(l21);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/lang/StringBuilder", "java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l22 = new Label();
mv.visitJumpInsn(IFEQ, l22);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "java/lang/String");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "android/text/TextUtils", "isEmpty", "(Ljava/lang/CharSequence;)Z", false);
Label l23 = new Label();
mv.visitJumpInsn(IFNE, l23);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "isFile", "()Z", false);
mv.visitJumpInsn(IFEQ, l23);
mv.visitLdcInsn("CloseableCheckTest");
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
mv.visitLdcInsn("available filePath: ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKESTATIC, "android/util/Log", "v", "(Ljava/lang/String;Ljava/lang/String;)I", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "isFile", "()Z", false);
mv.visitJumpInsn(IFEQ, l23);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 5);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 6);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 7);
mv.visitLabel(l6);
mv.visitTypeInsn(NEW, "java/io/FileInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileInputStream", "<init>", "(Ljava/io/File;)V", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitTypeInsn(NEW, "java/io/BufferedReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
mv.visitVarInsn(ASTORE, 7);
Label l24 = new Label();
mv.visitLabel(l24);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/util/List", "java/lang/StringBuilder", "java/util/Iterator", "java/lang/String", "java/io/File", "java/io/InputStream", "java/io/InputStreamReader", "java/io/BufferedReader"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "readLine", "()Ljava/lang/String;", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 8);
Label l25 = new Label();
mv.visitJumpInsn(IFNULL, l25);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn("\n");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
mv.visitInsn(POP);
mv.visitJumpInsn(GOTO, l24);
mv.visitLabel(l25);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "android/text/TextUtils", "isEmpty", "(Ljava/lang/CharSequence;)Z", false);
mv.visitJumpInsn(IFNE, l3);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 5);
Label l26 = new Label();
mv.visitJumpInsn(IFNULL, l26);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
mv.visitLabel(l26);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
Label l27 = new Label();
mv.visitJumpInsn(IFNULL, l27);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l27);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitJumpInsn(GOTO, l22);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 9);
mv.visitJumpInsn(GOTO, l22);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 5);
Label l28 = new Label();
mv.visitJumpInsn(IFNULL, l28);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
mv.visitLabel(l28);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
Label l29 = new Label();
mv.visitJumpInsn(IFNULL, l29);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l29);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitJumpInsn(IFNULL, l4);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/FileNotFoundException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitLdcInsn("CloseableCheckTest");
mv.visitLdcInsn("The File doesn't not exist.");
mv.visitMethodInsn(INVOKESTATIC, "android/util/Log", "d", "(Ljava/lang/String;Ljava/lang/String;)I", false);
mv.visitInsn(POP);
mv.visitLabel(l8);
mv.visitVarInsn(ALOAD, 5);
Label l30 = new Label();
mv.visitJumpInsn(IFNULL, l30);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
mv.visitLabel(l30);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
Label l31 = new Label();
mv.visitJumpInsn(IFNULL, l31);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l31);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitJumpInsn(IFNULL, l9);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitLdcInsn("CloseableCheckTest");
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "getMessage", "()Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKESTATIC, "android/util/Log", "d", "(Ljava/lang/String;Ljava/lang/String;)I", false);
mv.visitInsn(POP);
mv.visitLabel(l12);
mv.visitVarInsn(ALOAD, 5);
Label l32 = new Label();
mv.visitJumpInsn(IFNULL, l32);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
mv.visitLabel(l32);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
Label l33 = new Label();
mv.visitJumpInsn(IFNULL, l33);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l33);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitJumpInsn(IFNULL, l13);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 10);
mv.visitLabel(l16);
mv.visitVarInsn(ALOAD, 5);
Label l34 = new Label();
mv.visitJumpInsn(IFNULL, l34);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
mv.visitLabel(l34);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 0, null);
mv.visitVarInsn(ALOAD, 6);
Label l35 = new Label();
mv.visitJumpInsn(IFNULL, l35);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l35);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitJumpInsn(IFNULL, l17);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitLabel(l17);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
Label l36 = new Label();
mv.visitJumpInsn(GOTO, l36);
mv.visitLabel(l18);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 11);
mv.visitLabel(l36);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 10);
mv.visitInsn(ATHROW);
mv.visitLabel(l23);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"java/util/List", "java/lang/StringBuilder", "java/util/Iterator"}, 0, new Object[] {});
mv.visitJumpInsn(GOTO, l21);
mv.visitLabel(l22);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 12);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "test", "()V", null, new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitLdcInsn("https://www.baidu.com/");
mv.visitVarInsn(ASTORE, 1);
mv.visitTypeInsn(NEW, "java/net/URL");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/net/URL", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openConnection", "()Ljava/net/URLConnection;", false);
mv.visitTypeInsn(CHECKCAST, "java/net/HttpURLConnection");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "connect", "()V", false);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getResponseCode", "()I", false);
mv.visitIntInsn(SIPUSH, 200);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitIntInsn(SIPUSH, 1024);
mv.visitIntInsn(NEWARRAY, T_BYTE);
mv.visitVarInsn(ASTORE, 5);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_FULL, 6, new Object[] {"com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "java/lang/String", "java/net/URL", "java/net/HttpURLConnection", "java/io/InputStream", "[B"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 6);
mv.visitInsn(ICONST_M1);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l2);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitVarInsn(ILOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(I)V", false);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "close", "()V", false);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "test2", "()Ljava/io/InputStream;", null, new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitLdcInsn("https://www.baidu.com/");
mv.visitVarInsn(ASTORE, 1);
mv.visitTypeInsn(NEW, "java/net/URL");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/net/URL", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openConnection", "()Ljava/net/URLConnection;", false);
mv.visitTypeInsn(CHECKCAST, "java/net/HttpURLConnection");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "connect", "()V", false);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getResponseCode", "()I", false);
mv.visitIntInsn(SIPUSH, 200);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitTypeInsn(NEW, "java/io/BufferedReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/BufferedInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/io/BufferedReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/BufferedInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
mv.visitFieldInsn(PUTFIELD, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mInputStream", "Ljava/io/BufferedReader;");
mv.visitTypeInsn(NEW, "java/io/BufferedInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mInputStream", "Ljava/io/BufferedReader;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/String", "java/net/URL", "java/net/HttpURLConnection"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mRe", "Ljava/io/InputStream;");
mv.visitInsn(ARETURN);
mv.visitMaxs(8, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "test3", "()Ljava/io/InputStream;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
Label l3 = new Label();
Label l4 = new Label();
mv.visitTryCatchBlock(l3, l4, l2, "java/io/IOException");
Label l5 = new Label();
mv.visitTryCatchBlock(l0, l1, l5, null);
mv.visitTryCatchBlock(l3, l4, l5, null);
Label l6 = new Label();
mv.visitTryCatchBlock(l2, l6, l5, null);
Label l7 = new Label();
mv.visitTryCatchBlock(l5, l7, l5, null);
mv.visitLabel(l0);
mv.visitLdcInsn("https://www.baidu.com/");
mv.visitVarInsn(ASTORE, 1);
mv.visitTypeInsn(NEW, "java/net/URL");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/net/URL", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openConnection", "()Ljava/net/URLConnection;", false);
mv.visitTypeInsn(CHECKCAST, "java/net/HttpURLConnection");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "connect", "()V", false);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getResponseCode", "()I", false);
mv.visitIntInsn(SIPUSH, 200);
mv.visitJumpInsn(IF_ICMPNE, l3);
mv.visitTypeInsn(NEW, "java/io/BufferedReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/BufferedInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/io/BufferedReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/io/BufferedInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedReader", "<init>", "(Ljava/io/Reader;)V", false);
mv.visitFieldInsn(PUTFIELD, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mInputStream", "Ljava/io/BufferedReader;");
mv.visitTypeInsn(NEW, "java/io/BufferedInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/HttpURLConnection", "getInputStream", "()Ljava/io/InputStream;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/BufferedInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedInputStream", "close", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mInputStream", "Ljava/io/BufferedReader;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/BufferedReader", "close", "()V", false);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ASTORE, 6);
mv.visitLabel(l1);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "()V", false);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(ARETURN);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/String", "java/net/URL", "java/net/HttpURLConnection"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "mRe", "Ljava/io/InputStream;");
mv.visitVarInsn(ASTORE, 4);
mv.visitLabel(l4);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "()V", false);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 1, new Object[] {"com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest"}, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
mv.visitLabel(l6);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "()V", false);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 7);
mv.visitLabel(l7);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "()V", false);
mv.visitVarInsn(ALOAD, 7);
mv.visitInsn(ATHROW);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitMaxs(8, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "inputStream2String", "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
Label l3 = new Label();
Label l4 = new Label();
Label l5 = new Label();
mv.visitTryCatchBlock(l3, l4, l5, "java/lang/Exception");
Label l6 = new Label();
Label l7 = new Label();
Label l8 = new Label();
mv.visitTryCatchBlock(l6, l7, l8, "java/io/IOException");
Label l9 = new Label();
mv.visitTryCatchBlock(l3, l4, l9, null);
Label l10 = new Label();
mv.visitTryCatchBlock(l5, l10, l9, null);
Label l11 = new Label();
Label l12 = new Label();
Label l13 = new Label();
mv.visitTryCatchBlock(l11, l12, l13, "java/io/IOException");
Label l14 = new Label();
mv.visitTryCatchBlock(l9, l14, l9, null);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 2);
mv.visitTypeInsn(NEW, "java/io/StringWriter");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/StringWriter", "<init>", "()V", false);
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 1);
Label l15 = new Label();
mv.visitJumpInsn(IFNULL, l15);
mv.visitLdcInsn("");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "trim", "()Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
Label l16 = new Label();
mv.visitJumpInsn(IFEQ, l16);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/io/InputStreamReader", "java/io/StringWriter"}, 0, null);
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitVarInsn(ASTORE, 2);
Label l17 = new Label();
mv.visitJumpInsn(GOTO, l17);
mv.visitLabel(l16);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/io/InputStreamReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/InputStreamReader", "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l17);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIntInsn(SIPUSH, 8192);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l18 = new Label();
mv.visitLabel(l18);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[C", Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_M1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "read", "([C)I", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 5);
mv.visitJumpInsn(IF_ICMPEQ, l4);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/StringWriter", "write", "([CII)V", false);
mv.visitJumpInsn(GOTO, l18);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
Label l19 = new Label();
mv.visitJumpInsn(IFNULL, l19);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l1);
mv.visitJumpInsn(GOTO, l19);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
mv.visitJumpInsn(GOTO, l19);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l10);
mv.visitVarInsn(ALOAD, 2);
Label l20 = new Label();
mv.visitJumpInsn(IFNULL, l20);
mv.visitLabel(l6);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l7);
mv.visitJumpInsn(GOTO, l20);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_FULL, 6, new Object[] {"java/io/InputStream", "java/lang/String", "java/io/InputStreamReader", "java/io/StringWriter", "java/lang/Exception", "java/lang/String"}, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
mv.visitLabel(l20);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ARETURN);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {"java/io/InputStream", "java/lang/String", "java/io/InputStreamReader", "java/io/StringWriter"}, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 7);
mv.visitLabel(l14);
mv.visitVarInsn(ALOAD, 2);
Label l21 = new Label();
mv.visitJumpInsn(IFNULL, l21);
mv.visitLabel(l11);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStreamReader", "close", "()V", false);
mv.visitLabel(l12);
mv.visitJumpInsn(GOTO, l21);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/io/InputStream", "java/lang/String", "java/io/InputStreamReader", "java/io/StringWriter", Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, "java/lang/Throwable"}, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "printStackTrace", "()V", false);
mv.visitLabel(l21);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitInsn(ATHROW);
mv.visitLabel(l19);
mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {"java/io/InputStream", "java/lang/String", "java/io/InputStreamReader", "java/io/StringWriter"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 3);
Label l22 = new Label();
mv.visitJumpInsn(IFNULL, l22);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/StringWriter", "toString", "()Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitLabel(l22);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 9);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "writeFile", "(Ljava/io/InputStream;Ljava/lang/String;Z)Z", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
Label l3 = new Label();
mv.visitTryCatchBlock(l0, l1, l3, null);
Label l4 = new Label();
mv.visitTryCatchBlock(l2, l4, l3, null);
Label l5 = new Label();
mv.visitTryCatchBlock(l3, l5, l3, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l0);
mv.visitVarInsn(ILOAD, 2);
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
mv.visitInsn(POP);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "java/io/File", "java/io/FileOutputStream"}, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
mv.visitJumpInsn(IFNE, l1);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ALOAD, 0);
mv.visitJumpInsn(IF_ACMPEQ, l1);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getParent", "()Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "mkdirs", "()Z", false);
mv.visitInsn(POP);
mv.visitInsn(ICONST_M1);
mv.visitVarInsn(ISTORE, 7);
mv.visitIntInsn(SIPUSH, 1024);
mv.visitIntInsn(NEWARRAY, T_BYTE);
mv.visitVarInsn(ASTORE, 8);
mv.visitTypeInsn(NEW, "java/io/FileOutputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/FileOutputStream", "<init>", "(Ljava/io/File;)V", false);
mv.visitVarInsn(ASTORE, 5);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/io/File", Opcodes.INTEGER, "[B"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([B)I", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 7);
mv.visitInsn(ICONST_M1);
Label l8 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l8);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/FileOutputStream", "write", "([BII)V", false);
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 3);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
Label l9 = new Label();
mv.visitJumpInsn(GOTO, l9);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
mv.visitVarInsn(ASTORE, 6);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
mv.visitJumpInsn(GOTO, l9);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 9);
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 9);
mv.visitInsn(ATHROW);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "close", "(Ljava/io/Closeable;)Z", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
mv.visitVarInsn(ALOAD, 0);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEINTERFACE, "java/io/Closeable", "close", "()V", true);
mv.visitLabel(l1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 1);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "writeFile", "([BLjava/lang/String;Z)Z", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
Label l3 = new Label();
mv.visitTryCatchBlock(l0, l1, l3, null);
Label l4 = new Label();
mv.visitTryCatchBlock(l2, l4, l3, null);
Label l5 = new Label();
mv.visitTryCatchBlock(l3, l5, l3, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "exists", "()Z", false);
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ILOAD, 2);
Label l7 = new Label();
mv.visitJumpInsn(IFNE, l7);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "delete", "()Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "createNewFile", "()Z", false);
mv.visitInsn(POP);
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "java/io/File", "java/io/RandomAccessFile"}, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "createNewFile", "()Z", false);
mv.visitInsn(POP);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "canWrite", "()Z", false);
mv.visitJumpInsn(IFEQ, l1);
mv.visitTypeInsn(NEW, "java/io/RandomAccessFile");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 4);
mv.visitLdcInsn("rw");
mv.visitMethodInsn(INVOKESPECIAL, "java/io/RandomAccessFile", "<init>", "(Ljava/io/File;Ljava/lang/String;)V", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/RandomAccessFile", "length", "()J", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/RandomAccessFile", "seek", "(J)V", false);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/RandomAccessFile", "write", "([B)V", false);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 3);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
mv.visitVarInsn(ASTORE, 6);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 7);
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "close", "(Ljava/io/Closeable;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 7);
mv.visitInsn(ATHROW);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "close", "()V", null, new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitInsn(RETURN);
mv.visitMaxs(0, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "readResponse", "(ZILjava/io/InputStream;[I)[B", null, new String[] { "java/io/IOException" });
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/EOFException");
Label l3 = new Label();
Label l4 = new Label();
mv.visitTryCatchBlock(l3, l4, l2, "java/io/EOFException");
Label l5 = new Label();
mv.visitTryCatchBlock(l0, l1, l5, "java/io/IOException");
mv.visitTryCatchBlock(l3, l4, l5, "java/io/IOException");
Label l6 = new Label();
Label l7 = new Label();
mv.visitTryCatchBlock(l6, l4, l7, null);
Label l8 = new Label();
Label l9 = new Label();
mv.visitTryCatchBlock(l8, l9, l7, null);
Label l10 = new Label();
Label l11 = new Label();
mv.visitTryCatchBlock(l10, l11, l7, null);
Label l12 = new Label();
mv.visitTryCatchBlock(l7, l12, l7, null);
mv.visitVarInsn(ILOAD, 1);
Label l13 = new Label();
mv.visitJumpInsn(IFGT, l13);
mv.visitIntInsn(BIPUSH, 100);
mv.visitVarInsn(ISTORE, 1);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitLdcInsn(new Integer(1048576));
Label l14 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l14);
mv.visitLdcInsn(new Integer(1048576));
mv.visitVarInsn(ISTORE, 1);
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNONNULL, l6);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 0);
Label l15 = new Label();
mv.visitJumpInsn(IFEQ, l15);
mv.visitTypeInsn(NEW, "java/util/zip/GZIPInputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/zip/GZIPInputStream", "<init>", "(Ljava/io/InputStream;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIntInsn(SIPUSH, 8192);
mv.visitIntInsn(NEWARRAY, T_BYTE);
mv.visitVarInsn(ASTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 6);
mv.visitIntInsn(SIPUSH, 4096);
mv.visitVarInsn(ISTORE, 7);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, "java/io/InputStream", "[I", "[B", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ARRAYLENGTH);
Label l16 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l16);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_2);
mv.visitInsn(IMUL);
mv.visitIntInsn(NEWARRAY, T_BYTE);
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 6);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ASTORE, 4);
mv.visitLabel(l16);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/InputStream", "read", "([BII)I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IFLE, l1);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 6);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
Label l17 = new Label();
mv.visitJumpInsn(GOTO, l17);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitJumpInsn(IFLE, l8);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 1);
mv.visitJumpInsn(IF_ICMPLE, l8);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 8);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "safeClose", "(Ljava/io/Closeable;)V", false);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ARETURN);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/io/EOFException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ILOAD, 0);
Label l18 = new Label();
mv.visitJumpInsn(IFEQ, l18);
mv.visitVarInsn(ILOAD, 6);
mv.visitJumpInsn(IFLE, l18);
mv.visitJumpInsn(GOTO, l17);
mv.visitLabel(l18);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/io/EOFException"}, 0, null);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, "java/io/InputStream", "[I", "[B", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 1, new Object[] {"java/io/IOException"});
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/IOException", "getMessage", "()Ljava/lang/String;", false);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ILOAD, 0);
Label l19 = new Label();
mv.visitJumpInsn(IFEQ, l19);
mv.visitVarInsn(ILOAD, 6);
mv.visitJumpInsn(IFLE, l19);
mv.visitLdcInsn("CRC mismatch");
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
Label l20 = new Label();
mv.visitJumpInsn(IFNE, l20);
mv.visitLdcInsn("Size mismatch");
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
mv.visitJumpInsn(IFEQ, l19);
mv.visitLabel(l20);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/io/IOException", "java/lang/String"}, 0, null);
mv.visitJumpInsn(GOTO, l17);
mv.visitLabel(l19);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ATHROW);
mv.visitLabel(l17);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ILOAD, 6);
mv.visitJumpInsn(IFLE, l10);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IASTORE);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ASTORE, 8);
mv.visitLabel(l9);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "safeClose", "(Ljava/io/Closeable;)V", false);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ARETURN);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 8);
mv.visitLabel(l11);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "safeClose", "(Ljava/io/Closeable;)V", false);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ARETURN);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, "java/io/InputStream", "[I"}, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 10);
mv.visitLabel(l12);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "safeClose", "(Ljava/io/Closeable;)V", false);
mv.visitVarInsn(ALOAD, 10);
mv.visitInsn(ATHROW);
mv.visitMaxs(5, 11);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "safeClose", "(Ljava/io/Closeable;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitMethodInsn(INVOKESTATIC, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "safeClose", "(Ljava/io/Closeable;Ljava/lang/String;)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "safeClose", "(Ljava/io/Closeable;Ljava/lang/String;)V", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEINTERFACE, "java/io/Closeable", "close", "()V", true);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
Label l4 = new Label();
mv.visitJumpInsn(IFNULL, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEINTERFACE, "java/io/Closeable", "close", "()V", true);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Exception"});
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "bytes", "()[B", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "com/ss/android/ugc/bytex/example/closeable/CloseableCheckTest", "byteStream", "()Ljava/io/ByteArrayOutputStream;", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/ByteArrayOutputStream", "toByteArray", "()[B", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "byteStream", "()Ljava/io/ByteArrayOutputStream;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "hashCode", "()I", false);
mv.visitVarInsn(ISTORE, 1);
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFLE, l0);
mv.visitTypeInsn(NEW, "java/io/ByteArrayOutputStream");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayOutputStream", "<init>", "(I)V", false);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitTypeInsn(NEW, "java/io/ByteArrayOutputStream");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/ByteArrayOutputStream", "<init>", "()V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
